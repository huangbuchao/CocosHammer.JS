{"version":3,"sources":["Test.js"],"names":["PREVSET_EVENTS","HANDLE_MAP","LABEL_TEXT_MAP","cc","Class","extends","Component","properties","onLoad","initPosition","node","getPosition","hammer","Hammer","refreshRecognizer","convertRecognizer","e","data","updateLabel","parseInt","value","prevEventSet","off","on","eventDelegate","console","log","arguments","type","str","parent","getChildByName","getComponent","Label","string","resetNode","setPosition","setScale","onPan","eventType","rotation","onTap","onSwipe","onPress"],"mappings":"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","file":"Test.js","sourceRoot":"../../../../assets/Script","sourcesContent":["import Hammer from \"./CocosHammer\";\n\nconst PREVSET_EVENTS = [\n  \"panstart panmove panend pancancel\",\n  \"tap\",\n  \"swipeleft swiperight\",\n  \"press pressup\"\n];\nconst HANDLE_MAP = [\"onPan\", \"onTap\", \"onSwipe\", \"onPress\", \"onRotate\"];\nconst LABEL_TEXT_MAP = [\n  \"pan test\",\n  \"tap test\",\n  \"swipe test\",\n  \"press test\",\n  \"rotate test\"\n];\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {},\n\n  onLoad() {\n    this.initPosition = this.node.getPosition();\n    this.hammer = new Hammer(this.node);\n    this.refreshRecognizer(0);\n  },\n\n  /**\n   * on button click, convert corresponding recognizer.\n   * @param {cc.Event} e\n   * @param {customData} data\n   */\n  convertRecognizer(e, data) {\n    this.updateLabel(LABEL_TEXT_MAP[data]);\n    this.refreshRecognizer(parseInt(data));\n  },\n\n  /**\n   * remove prevent event handlers, add required event listener.\n   * @param {number} value\n   */\n  refreshRecognizer(value) {\n    if (this.prevEventSet) {\n      this.hammer.off(this.prevEventSet);\n    }\n    this.prevEventSet = PREVSET_EVENTS[parseInt(value)];\n    this.hammer.on(this.prevEventSet, this.eventDelegate, this, value);\n  },\n\n  /**\n   * delegate different events, invoke corresponding handler.\n   * @param {wrapped event target} e\n   */\n  eventDelegate() {\n    console.log(\"listened: \", arguments[1].type);\n    this.updateLabel(arguments[1].type + \" gesture detected.\");\n    this[HANDLE_MAP[arguments[0]]](arguments[1]);\n  },\n\n  /**\n   * update label's text\n   * @param {String || undefined} str\n   */\n  updateLabel(str) {\n    this.node.parent\n      .getChildByName(\"manager\")\n      .getChildByName(\"label\")\n      .getComponent(cc.Label).string = str || \"\";\n  },\n\n  resetNode() {\n    this.node.setPosition(this.initPosition);\n    this.node.setScale(1, 1);\n  },\n\n  /**\n   * handle selfType event.\n   * @param {wrapped event target} e\n   */\n  onPan(e) {\n    let eventType = e.type;\n    // if (eventType === \"panstart\") {\n    //   this.startPoint = this.node.getPosition();\n    // }\n    // this.node.setPosition(\n    //   this.startPoint.x + e.deltaX,\n    //   this.startPoint.y + e.deltaY\n    // );\n    // if (eventType === \"panend\" || eventType === \"pancancel\") {\n    //   this.resetNode();\n    // }\n    console.log(\"rotation\", e.rotation);\n    this.node.rotation = e.rotation;\n  },\n\n  onTap() {},\n\n  onSwipe(e) {\n    let eventType = e.type;\n    console.log(e);\n  },\n\n  onPress(e) {\n    let eventType = e.type;\n    if (eventType === \"press\") {\n      this.node.setScale(0.8, 0.8);\n    }\n    if (eventType === \"pressup\") {\n      this.node.setScale(1, 1);\n    }\n  }\n});\n"]}