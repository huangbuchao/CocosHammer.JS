{"version":3,"sources":["Test.js"],"names":["PREVSET_EVENTS","HANDLE_MAP","LABEL_TEXT_MAP","cc","Class","extends","Component","properties","onLoad","initPosition","node","getPosition","hammer","Hammer","refreshRecognizer","convertRecognizer","e","data","resetNode","updateLabel","parseInt","value","prevEventSet","off","on","eventDelegate","console","log","arguments","type","str","parent","getChildByName","getComponent","Label","string","stopAllActions","setPosition","setScale","rotation","onPan","eventType","startPoint","x","deltaX","y","deltaY","onTap","s","runAction","sequence","scaleTo","callFunc","onSwipe","moveBy","onPress","onRotate","initRotation"],"mappings":"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","file":"Test.js","sourceRoot":"../../../../assets/Script","sourcesContent":["import Hammer from \"./CocosHammer\";\n\nconst PREVSET_EVENTS = [\n  \"panstart panmove panend pancancel\", //panleft panright panup pandown\n  \"tap doubletap quadrupletap\",\n  \"swipeleft swiperight swipeup swipedown\",\n  \"press pressup\",\n  \"rotatestart rotatemove rotateend\"\n];\nconst HANDLE_MAP = [\"onPan\", \"onTap\", \"onSwipe\", \"onPress\", \"onRotate\"];\nconst LABEL_TEXT_MAP = [\n  \"pan test\",\n  \"tap test\",\n  \"swipe test\",\n  \"press test\",\n  \"rotate test\"\n];\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {},\n\n  onLoad() {\n    this.initPosition = this.node.getPosition();\n    this.hammer = new Hammer(this.node);\n    this.refreshRecognizer(0);\n  },\n\n  /**\n   * on button click, convert corresponding recognizer.\n   * @param {cc.Event} e\n   * @param {customData} data\n   */\n  convertRecognizer(e, data) {\n    this.resetNode();\n    this.updateLabel(LABEL_TEXT_MAP[data]);\n    this.refreshRecognizer(parseInt(data));\n  },\n\n  /**\n   * remove prevent event handlers, add required event listener.\n   * @param {number} value\n   */\n  refreshRecognizer(value) {\n    if (this.prevEventSet) {\n      this.hammer.off(this.prevEventSet);\n    }\n    this.prevEventSet = PREVSET_EVENTS[parseInt(value)];\n    this.hammer.on(this.prevEventSet, this.eventDelegate, this, value);\n  },\n\n  /**\n   * delegate different events, invoke corresponding handler.\n   * @param {wrapped event target} e\n   */\n  eventDelegate() {\n    console.log(\"listened: \", arguments[1].type);\n    this.updateLabel(arguments[1].type + \" gesture detected.\");\n    this[HANDLE_MAP[arguments[0]]](arguments[1]);\n  },\n\n  /**\n   * update label's text\n   * @param {String || undefined} str\n   */\n  updateLabel(str) {\n    this.node.parent\n      .getChildByName(\"manager\")\n      .getChildByName(\"label\")\n      .getComponent(cc.Label).string = str || \"\";\n  },\n\n  resetNode() {\n    this.node.stopAllActions();\n    this.node.setPosition(this.initPosition);\n    this.node.setScale(1, 1);\n    this.node.rotation = 0;\n  },\n\n  /**\n   * handle selfType event.\n   * @param {wrapped event target} e\n   */\n  onPan(e) {\n    let eventType = e.type;\n    if (eventType === \"panstart\") {\n      this.startPoint = this.node.getPosition();\n    }\n    this.node.setPosition(\n      this.startPoint.x + e.deltaX,\n      this.startPoint.y + e.deltaY\n    );\n    if (eventType === \"panend\" || eventType === \"pancancel\") {\n      this.resetNode();\n    }\n  },\n\n  onTap() {\n    let s = 0.9;\n    this.node.runAction(\n      cc.sequence(\n        cc.scaleTo(0.1, s, s),\n        cc.callFunc(() => {\n          this.node.setScale(1, 1);\n        })\n      )\n    );\n  },\n\n  onSwipe(e) {\n    this.node.runAction(cc.moveBy(0.2, e.deltaX, e.deltaY));\n  },\n\n  onPress(e) {\n    let eventType = e.type;\n    if (eventType === \"press\") {\n      this.node.setScale(0.8, 0.8);\n    }\n    if (eventType === \"pressup\") {\n      this.node.setScale(1, 1);\n    }\n  },\n\n  onRotate(e) {\n    let eventType = e.type;\n    if (eventType === \"rotatestart\") {\n      this.initRotation = this.node.rotation;\n    }\n    this.node.rotation = this.initRotation + e.rotation;\n  }\n});\n"]}